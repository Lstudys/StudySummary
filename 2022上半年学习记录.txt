1、react函数组件使用useState就是增加了函数组件从内部更新UI的方法
2、cookie属性：name、value、domain、path、Expires/Max-age、Size、HttpOnly(不能用DOM操作cookie)、Secure(HTTPS)
3、函数组件刷新，子组件情况？
4、react useState更新数据是异步的
5、react父组件render后不管向子组件传递的props是否变化，都会再传进去一个props对象，可在子组件中使用
      shouldComponentUpdate判断props是否有变化决定子组件是否render
6、父组件中向子组件传递props是赋值，并不是绑定，即子组件不会捕捉到父组件传递props的那个变量的变化，所以父组件的
      变量作为props传递给子组件时子组件并不会重新render。把state作为子组件props会导致子组件render的原因是父组件重新
       render，子组件又被传递了一次props，即使props没有变化也会执行componentWillReceiveProps钩子
7、GUI线程渲染页面过程：解析DOM树和CSSOM树，把DOM和CSS树合并成renderTree，reflow/layout（重排）计算几何信息，
       repaint（重绘）绘制页面。
8、DOM的几何属性改变会导致重排，然后重绘，非几何属性改变会导致重绘，渲染的四个过程可看作是钩子函数
9、new运算符：创建空对象并把this引用该对象，把_proto_指向构造函数的原型(prototype)，执行func.call(对象)
10、HTML5：语义标签、浏览器存储(localStorage、sessionStorage)、data自定义属性
11、HTML５data-用法：标签中定义data-article-name，获取该标签的DOM结点，通过dataset属性获取自定义data值，
        获取后的变量名是驼峰形式的
12、css @import必须放在其他样式之前使用，否则不会导入
13、BFC区域不会与浮动元素重叠，即不会覆盖浮动元素
14、vue项目启动加载过程
15、vue生命周期中的各个对象及做的事？
16、vue组件this的各个属性？$el有什么？vue2和vue3生命周期区别
17、对比react生命周期
18、vue组件的$el是在beforeMount之后创建的，即挂载时创建的
19、vue2双向绑定原理？弊端？
20、$nexttick原理？
21、JavaScript常用设计模式？
22、JavaScript全局异常检测，window.onerror
23、路由守卫？
24、vue props和react类似，可组件内定义，可从父组件接收，不能修改。父组件传过来对象时，是浅拷贝
25、react构造函数能否访问普通变量？可以访问
26、vue钩子函数什么阶段可以访问什么内容？ 
27、setup定义watch、computed属性
28、vue：watch、computed、filter
29、vue3 setup的props参数不能使用es6解构是因为props是响应式的，即父组件传来的props变化后子组件收到的props也会变，
        解构出来的话解构的变量值不会随着props改变而改变，所以需要用toRefs解构 
30、vue3：computed、watch使用
31、vue3的computed和在使用本质上没有变化，形式上做了改变。本质上computed多了定义可读写变量
32、vue3 setup定义响应式对象:通过ref函数赋值，使用变量名.value访问修改变量。基本类型和对象的响应式实现不一样，
       基本类型通过refImpl实现，对象通过proxy实现
33、vue3 setup作用：定义vue2中的data、methods、computed、watch等属性，作为钩子函数。注意：setup是在create之前
        执行的，所以UI刷新后不会执行setup！！！
34、在setup中通过ref设置的响应式变量，基本类型通过.value访问值，对象通过.value也是访问到值，属性不需要再通过value
        访问，可直接访问，因为基本类型和对象的响应式实现不同。数组也是对象类型，所以也是通过.value访问值，再通过[]
        访问元素 
35、reactive创建响应式对象，不需要写value，语义化更好
36、es6 proxy给对象添加访问属性的拦截器，可设置所有属性，而object.defineProperty是给对象的一个属性添加拦截器等属性。
        proxy是设置对象原本就有的属性，且生成了一个代理对象，而object.defineProperty是给对象添加一个新属性。vue的$set
       可能就是封装了object.defineProperty
37、vue2更改数组值？使用数组方法（vue封装过了）或使用vue.set或this.$set
38、观察者模式启发：在观察者对象的构造函数中把该对象添加进观察者集合中，添加方法的参数是实例对象，传参时可以传入
        this，因为对象中this指的是当前对象的引用
39、观察者模式参考：https://blog.csdn.net/yexudengzhidao/article/details/90183416
40、数组push对象，添加进去的是地址，相当于浅拷贝
41、vue2双向绑定原理：通过观察者模式实现
42、 Object.prototype.toString.call()原理：把object原型的toString方法绑定到(call的作用)括号内的对象上，返回的就是
        对应的数据类型，基本类型返回的是对应的对象类型，因为是函数调用，会临时创建一个对象，所以是对象类型，无法判断
        是否是基本类型。不加call函数，返回的都是Object，可能是this在prototype上的原因
43、es6proxy的set函数不能修改value，即只能接收设置的值并作出一些响应，而不能修改设置的值！！！object.defineProperty
        的set应该也是。（但是可以设置原对象的值，通过target参数）？？？
44、vue2响应式缺点：对象直接添加删除属性不会更新UI，数组通过下标修改元素也不会更新UI。解决办法：给对象添加属性
        通过this.$set或vue.set，删除属性通过this.$delete或vue.delete。修改数组元素通过set或$set或者通过数组方法，数组
        方法是vue封装过的
45、分清楚vue响应式原理和双向绑定原理
46、vue2响应式：初始化时把data的属性全部转为getter和setter，是把同名属性作为vue实例的属性，弄清楚了已经定义的属性
        怎么通过object.defineProperty 处理
47、vue2响应式实现：实例化vue对象后，遍历data对象，通过Object.defineProperty把属性添加到实例上面，如果data的属性
       是对象，则先给实例加一个同名空对象，再使用Object.defineProperty定义属性，再进行赋值操作，当数据变化时，触发
        setter，修改data的数据，接着使用该数据的节点监听到数据变化，更新UI（这一步是在data对象中添加setter来通知节点
        更新，叫做数据劫持，不是在实例上的代理的setter中添加的监听），主题对象在属性的setter中，节点的更新函数添加到
         了主题对象的订阅者集合中
48、vue3响应式实现：通过Proxy代理对象，而不是vue2的给实例添加同名对象再给对象添加代理属性，通过reflect修改原对象
        属性并进行更新UI操作。代理基本类型方法待定
49、Object.defineProperty设置属性如果不加value，只设置setter和getter，该属性不算是对象的正常属性，只作为代理作用，
        不能正常赋值，vue2响应式原理即将data的数据代理到组件实例上面，修改时修改的是data，并不是对象上的代理属性，
         代理属性不能赋值
50、es6 Proxy第二个参数如果是空对象，则代理对象的get默认返回原对象对应属性，修改代理对象的属性也修改原对象
        的对应属性，添加删除属性也一样
51、vue3响应式原理优势：因为Proxy代理的是一个对象，或者说监听的是一个对象，所以能检测所有属性，新加属性时，
        可以直接捕获到并触发setter，进行更新UI操作
52、‘2’ + 2 = ‘22’。加法是转为字符合并，减法是转为算术运算，不能运算就是NAN
53、JavaScript数组sort方法参数从小到大排序：function(a, b){return a - b},从大到小：return b - a。元素是对象也可以
54、双指针问题：根据固定的数找指针位置，不要根据两个指针位置找另一个数
55、JavaScript数组：find和findIndex是传入函数，返回符合得元素的索引。indexOf是传入元素，返回元素索引
56、Map初始化是传入一个数组，键值对也用数组包裹
57、JavaScript ！：!0是true，!2(非0数字)是false，![]是false，![].length是true。1和0可以替代true、false，一般不用
58、Object.getprototypeOf()获取对象的原型。Object的原型是null
59、NAN是number类型，typeof NAN是number。isNAN()将参数转为number判断（非NAN的数字），Number.isNAN()先
        判断是否是number类型再转为number(非NAN的数字)，number.isNAN更准确
60、new Array(2)，初始化长度为2的空数组（length属性为2，实际上是空数组）
61、undefined是不知道是什么类型，可能是基本类型也可能是引用类型，null是指明了是指向引用的数据类型，但是现在没有指向，
        undefi的变量作为全局对象的属性，null不作为全局对象的属性
62、观察者模式存储观察者的集合是直接存储观察者，发布订阅模式存储的是根据type分类的观察者数组
63、async await中await后如果是同步语句就执行，如果是异步任务就正常异步任务，异步任务不会被等待执行，还是在处理异步
        任务的线程中执行的。（await后面的语句只是正常执行而已）
64、0、undefined、null、NAN、''都是false，[]不是false（有争议），数组是引用类型，变量有指向所以不是false
65、Generator的yield表达式没有返回值，next方法的参数就是上一个yield表达式的返回值，在yield表达式需要返回一个值时用到
        yield没有返回值即不能把它返回的数据内容赋值给变量，返回内容是给next函数的
66、axios发送请求，如果只写路径，协议默认使用地址栏的协议，写完整路径，协议使用URL的协议
67、HTTP缓存：强缓存通过设置Cache-Control字段的max-age或设置Expires字段设置资源过期时间设置强缓存。
        协商缓存：通过设置Cache-Control字段为no-cache设置使用协商缓存，并且服务端要设置Last-Modified字段(客户端对应字段
        是if-Modified-Since或者Etag(客户端对应是if-None-Match)进行对比资源是否过期
68、CDN加速原理
69、常用HTTP头字段：accept相关（text/plain），cookie，Authorization ，origin，content-type(请求体的媒体类型)，
        Cache-Control
70、window.onerror，参数：错误信息字符串，错误所在脚本URL(文件)，错误所在行号，错误所在列号，错误对象
71、iife（立即执行函数）中的作用域：1、没有var声明的变量也作为全局变量，2、块级作用域，3、闭包函数不可修改
72、var obj = {}, obj = {num:1}，此时obj的指向改变，和obj = new Object()效果一样
73、对象 . 运算符优先级大于赋值运算符
74、es6 class使用typeof判断，返回结果是function，es6类的类型就是function，tostring结果是function
75、es6类也可以通过prototype设置原型对象
76、浏览器默认行为指的是点击a标签跳转、表单回车提交等行为，react-route的link是封装了a标签，把to等参数合成href，
        link负责变更当前URL，route负责根据URL渲染对应组件
77、vueRouter和reactRouter的区别体现在vue集中管理路由，react由父组件动态分配路由（即在需要使用路由的地方使用Route
        标签声明路由组件）
78、垃圾回收机制：标记清除法，引用计数法（对象不再使用时把引用设为null，不是js引擎自动识别使用不使用）
79、XMLHttpRequest四个状态、open/send等方法。0：创建xhr对象，1：初始化参数(open)，2：发送请求(send)，3：收到
        响应头，4：收到响应体
80、JavaScript数组截取元素的方法都包含左边不包含右边
81、JavaScript Math的max和min参数可以是任意多个
82、typeof的返回结果是字符串类型
83、es6 proxy的set返回原对象的属性时不能直接target.prop，prop不会转为属性名，会找名为prop的属性
84、es6 Reflect对象用于获取和设置代理对象的属性，和Proxy内部使用
85、JavaScript作用域链是创建函数时确定的！！！函数有一个scope属性，包含了函数能访问的外部的对象，闭包就是这样产生的
        。创建函数时，函数的scope属性会收集创建函数的环境中函数能访问的对象，根据作用域的层次分不同的层，函数使用
         变量时从scope中查找，从内层向外层
86、JavaScript构造函数this和return返回一个对象同时存在的情况
87、let声明的变量不作为全局对象的属性，而且不作为变量对象的属性
88、JavaScript数组splice方法添加元素时第二个参数为0，添加位置是下标前面，即取代第1个参数对应的元素
89、删除数组第一个元素：splice(0, 1) 或 shift
90、Promise.all，promise数组中有一个reject就执行catch，且后面的promise都不执行。resolve的结果和执行完成的顺序不一样，
        和传入的参数顺序一样
91、promise的resolve、reject、all、race等方法都可直接使用，类似静态方法
92、promise.race传入多个promise对象，哪个先resolve或reject就执行哪个回调
93、react类组件传递属性直接传入，通过props获取；函数组件传递属性通过定义组件时定义参数传入。{prop}传入一个对象然后解构出来
    一个属性，...arr传入一些任意多个属性，不是传入数组 
94、JavaScript数组push方法返回新的长度
95、promise.all传入空数组也会执行then，参数是空数组。promise.race传入空数组不会执行但是会返回promise对象
96、JavaScript箭头函数没有prototype属性，所以无法作为构造函数，也不能作为generator，不能改变this指向
97、JavaScript箭头函数定义时的最高对象是window对象，在对象方法中定义是最高对象是该对象
98、JavaScript Promise.race传入promise对象时不再执行内部代码，调用then时也不执行，只是定义promise对象时执行一次，
         调用then时根据定义对象时的执行顺序决定使用哪个resolve的值。牢记：Promise对象只在创建时执行，之后不会再次执行
         并且状态不会改变
99、es6扩展运算符只能对具有Iterator 接口的对象使用
100、Iterator作用：使集合中的不同类型的对象可以依次访问，即按某种顺序遍历。返回一个对象，该对象有一个next方法，返回
          一个对象：{value, done}。
101、Array.of把一组值转为数组
102、es6对象属性名和方法的简写形式、属性名表达式、super指向对象的原型对象
103、闭包是函数的scope属性形成的，使用闭包场景：一些变量不希望被别人直接访问修改，定义一个方法并返回，通过此方法
          访问或修改变量
104、数组join方法把数组转换为字符串，默认以逗号分隔（返回类型是基本类型不是对象），valueOf方法
105、Obje.keys和Obje.values分别返回对象的键和值（必须是可遍历的属性），必须是自身属性，不含原型链上的。返回结果
          是数组形式
106、声明式编程和命令式编程
107、表达式是有返回值的，语句没有返回值
108、React虚拟DOM相关：虚拟DOM是描述真实DOM的js对象，通过React的createElement方法创建虚拟DOM，通过ReactDOM
          的render方法把虚拟DOM挂载到真实DOM上，JSX语法是语法糖，简单的写虚拟DOM的配置对象，通过Babel转化为调用
           createElement方法的形式
109、getDerivedStateFromProps替代componentWillMount和componentWillReceiveProps，两个参数分别是nextprops和
           preState，主要在组件state和props有关联时使用，即当前组件的state由props决定，props由父组件传递而来
110、es6的class的constructor可以定义一些参数，初始化时传入，super就是调用了父类的构造函数，把父类的this传给了
          子类（大概是这样），所以子类可以使用父类方法和属性。原型链应该也是跟this有关
111、react setState传入对象覆盖的情况只出现在react合成的事件中，原生事件不会出现覆盖情况且是同步更新
112、react、vue列表加key把数据和组件绑定起来（个人理解）
113、redux中间件是在发送action之后到reducer执行之前进行拦截，做出一些操作
114、回顾react route的exact属性和switch属性
115、通过路由router包裹的组件，就可以接收一些路由相关的属性，类组件就从props中获取，函数组件就从参数中获取（解构）
116、SPA：react根组件是通过ReactDOM的render方法挂载到index.html文件中的div标签上的；类似胖客户端；可以改变URL、
          改变页面组件显示而不像服务器发送请求且不重新渲染页面。多页面（MPA）会刷新整个页面，包括公共资源
117、react router两种模式原理（history原理和BOM）
118、localStorage不能直接存储对象，只能存储字符
119、函数缓存，利用闭包实现
120、object.create创建一个对象，第一个参数是给新建对象的原型对象
121、object.assign把一个对象的属性（自身可遍历的属性）克隆到另一个对象中。第一个参数是目标对象，第二个参数是源对象。
          非对象类型会先转为对象，undefined和null不能转为对象；数组按下标处理；属性是对象的会被替换，即只添加一层，不是
           深拷贝
122、map的键是引用类型时，使用get获取时是根据地址获取的
123、闭包应用场景：防抖、节流、函数缓存、上面103
124、vue3性能优化点：使用Proxy代理，属性是对象时，也能进行代理，可直接修改对象属性的属性
125、HTTP相关
126、HTTPS TLS加密原理（RSA方式）
127、Vue nextTick原理
128、es module和commonjs区别：esm静态导入，common动态导入，esm可以按需导入（tree shaking），common全部导入
          ，esm导入的是引用，并且不能改变其指向，common导入的是拷贝值。（此处涉及到了函数作用域链的问题，函数中使用
           的变量都是定义时确定的）
129、JavaScript闭包中的this指向window对象（浏览器中）。对象中的方法中定义立即执行函数是在调用该方法时立即执行
           的。对象方法中调用全局方法时this指向全局对象，注意此时的作用域链
130、JavaScript Date对象的now是静态方法，获取当前的时间戳，也可以使用new Date()实例化一个对象然后调用实例方法
           获取当前时间戳
131、判断对象属性是否为undefined或null时一般使用==，其余情况最好使用===
132、对象的hasOwnProperty在使用for in遍历对象时可以使用，结果为true，不是按照值、地址判断的。访问对象属性不
          能用.item，会按照‘item’找属性，只能用[item]。
133、使用for in循环时，记住遍历的是属性！！！深拷贝时不能直接把item作为参数传递
134、new操作符确实是做了三个步骤，只不过手写new操作符时需要两个对象（一个空对象一个call后返回的对象），call返回的
          对象针对构造函数return对象的情况
135、CSS盒模型的border四个边框不是长方形，相接的地方是均分的，相接的线是对角线延长线
136、react函数组件监听输入框用户输入方式和类组件一样，都是react封装好的事件
137、hook的深入理解。usestate：会自己更新UI！useEffect只是钩子函数，传一个回调，可用在监听用户输入时把输入的数值
           发送给服务端（监听函数把输入值传给state）。 
138、es6module的import()方法动态导入模块，作用类似require，返回一个promise对象，回调的参数是module对象（module的
           整个导出内容，即使不是default导出也能访问导出内容）
139、JavaScript对象的this和原型链应该有一定的关系，这种关系使得在实例中可以访问原型中的属性和方法。这种关系应该是实
          例化对象时创建的
140、面向对象语言中，继承是指类与类之间的继承，子类中可以访问父类的属性和方法，子类的实例中有父类定义的属性和方法，
          这一点和JavaScript的原型链不同，原型链是JavaScript的一种特性，并不是面向对象中的继承
141、JavaScript模拟继承：原型链继承（缺点：子类实例共享一个原型上的属性），call调用继承（缺点：只能继承父类自身的属性
           和方法，无法继承父类原型上的属性方法）
142、事件冒泡的最高节点是window对象？
143、感悟：通常实例化一个Date对象然后调用某个方法，此时是没有变量指向这个对象的，但是这个对象仍然存在（在堆中），不
          取决于是否有变量指向它，不过如果没有变量指向它，根据引用计数的垃圾回收算法，这个对象使用后不久就会被收回
144、axios、xhr等网络请求对象使用的协议和服务端有关，即和当前域的协议有关（即和当前域的协议相同） 
145、webSocket连接是自动建立的，即实例化一个webSocket对象时建立的（客户端会自动与服务端建立连接）
146、reactRouter和vueRouter的区别可从声明式和命令式编程的角度来理解
147、Number()可以把参数转化为数字类型，如果参数是字符数字则转化为对应数字，如果是字符转为NAN
148、再次确定：作用域链是在创建时确定的，是静态的，不会在调用函数时受影响
149、useEffect是每次刷新UI时，依赖项如果变化了就执行，不是依赖项变化就执行。函数组件内部更新UI只有useState
150、JavaScript函数的scope属性中存的变量并不都是闭包，分为闭包中的变量、块级变量和全局变量的引用，经典的for循环
          settimeout不是闭包，是全局变量的引用
151、useEffect第二个参数是对象时是按引用判断的。且内部是闭包
151、useState是异步更新state的
152、react子路由设置时不用加上父路由的路径，子路由本来就是相对父路由的路径的
153、JavaScript对象通过[]获取方法再通过（）调用方法
154、手写JavaScript内置的一些函数，获取参数通过arguements对象获取，形式参数是规定的参数，arguements是实际的参数
155、arguments不是数组不能用数组方法，有iterater接口，可以用展开运算符展开
                  